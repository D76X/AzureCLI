# Choose the right Azure command-line tool
# https://learn.microsoft.com/en-us/cli/azure/choose-the-right-azure-command-line-tool#different-shell-environments

# As explained in the article
# In the following we assume the commands are to be run in Bash Shell
# If the shell of choice is Powershell then the commands must be adjusted accordingly!

# --------------------------------------------------------------------------------------------------

# Sign in with Azure CLI
# https://learn.microsoft.com/en-us/cli/azure/authenticate-azure-cli

# interactive flow
az login

# The pproach doesn't work with Microsoft accounts or accounts that have two-factor authentication enabled
az login -u <username> -p <password>

# --------------------------------------------------------------------------------------------------

# How to manage Azure subscriptions with the Azure CLI
# https://learn.microsoft.com/en-us/cli/azure/manage-azure-subscriptions-azure-cli#change-the-active-subscription
# The Azure CLI supports selecting a subscription both globally and per command.
# Azure CLI commands no longer default the subscription ID to your current, active subscription to improve security.
# You must now specify the subscription to work in by using the --subscription or --scope parameter in your command.

# the following retrive the info about the subscritptions available to the logged in user
# append switch --output table for table output instead of json

az account tenant list
# this prodeces the subscriptiionIds of the ADD Tenant the bash user is logged in
# However, it does not show the name of the corresponding subscriptions
az account tenant list --output table

# the query switch together with the -o tvs can be used to display id-name pairs
# subscriptionId-Name
az account list --query "[].id" -o tsv
az account list --query "[]. [id,name]" -o tsv

az account show


# the TenantId of this command is the subscriptionId that is used as a default
az account show --output table

# get the current default subscription using list
az account list --query "[?isDefault]"

# store the default subscription  in a variable
# WARNING
# This will not succeed if the command is not run in a Bash based shell!
# Make sure oyu have not selected Powershell or pwsh as for those shells this syntax 
# will not work 
subscriptionId=$(az account list --query "[?isDefault].id" -o tsv)
echo $subscriptionId

# --------------------------------------------------------------------------------------------------

# Change the active subscription
# https://learn.microsoft.com/en-us/cli/azure/manage-azure-subscriptions-azure-cli#change-the-active-subscription
az account set --subscription "My Demos"
az account set --subscription "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
az account set --subscription "Visual Studio Professional with MSDN"
az account set --subscription "Visual Studio Enterprise – MPN"

# it is also possible to use variables
SUB_NAME_PROFESSIONAL="Visual Studio Professional with MSDN"
echo ${SUB_NAME_PROFESSIONAL}

SUB_NAME_ENTERPRISE="Visual Studio Enterprise – MPN"
echo ${SUB_NAME_ENTERPRISE}

# and then use the following syntax..
# you must use the syntax "${VAR_NAME}" as 
# 1- the ${VAR_NAME} gets the value of the variable VAR_NAME
# 2- the "VAR_VALUE" turns the value into a literal!
az account set --subscription "${SUB_NAME_PROFESSIONAL}"

# change the active subscription using a variable
subscriptionId=$(az account list --query "[?isDefault].id" -o tsv)
echo subscriptionId
az account set --subscription $subscriptionId

# verify
az account show
az account show --query "id"
az account show --query "[id, name]"
az account show --query "[id, name]" -o tsv

# --------------------------------------------------------------------------------------------------
# AzureCLI JMESPath query
# https://learn.microsoft.com/en-us/cli/azure/query-azure-cli?tabs=concepts%2Cbash
# https://jmespath.org/
# JMESPath Examples
# https://jmespath.org/examples.html

# Find the subscriptions that are linked to this AAD Tenant

# diplay the result as an array of array 
az account list --query "[].[id,name]"

# diplay the result as an array and apply the -o tsv to flatten it
az account list --query "[].[id,name]" -o tsv

# diplay the result as an array of json dictionaries and assigned the keys ID & NAME 
az account list --query "[].{ID:id, NAME:name}"

# Filter with boolean expressions
# IMPORTANT
# The char ? at the beginning of the argument to --query is essential else the 
# query will not return the correct results!

# take only id and name of the items that have isDefault evaluated to true
az account list --query "[?isDefault].[id,name]"

# take only id and name of the items that have isDefault evaluated to false
# notie that the logic operator ! would not work 
az account list --query "[?isDefault == \`false\`].[id,name]"

# the same query but the format of the response is that of an array of json dictionaries
# instead of an array of json objects
az account list --query "[?isDefault == \`false\`].{ID:id,NAME:name}"

# --------------------------------------------------------------------------------------------------

# Query with filter and store the results into a variable

# this returns an array of arrays 
az account list --query "[?name == 'Visual Studio Enterprise – MPN'].[id,name]"

# this takes the [0] array
az account list --query "[?name == 'Visual Studio Enterprise – MPN'].[id,name] | [0]"

# this takes the [0] array and then its [0] element
az account list --query "[?name == 'Visual Studio Enterprise – MPN'].[id,name] | [0] | [0]"

# the query result may be stored into a variable
# in this case the returned value is expected to be an array with a single element
id0=$(az account list --query "[?name == 'Visual Studio Enterprise – MPN'].[id,name] | [0] | [0]")
# in Bash to dump the value of the variable you must use $varName - the $ is required!
echo $id0


# --------------------------------------------------------------------------------------------------
